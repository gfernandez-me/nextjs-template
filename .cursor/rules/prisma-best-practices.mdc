# Prisma Best Practices and Common Mistakes

## 1. Enum Usage - ALWAYS Use Generated Types

### ❌ WRONG - String Literals with as const
```typescript
// NEVER do this
statCategory: "FLAT" as const,
statCategory: "PERCENTAGE" as const,
```

### ✅ CORRECT - Use Generated Enum Types
```typescript
// ALWAYS do this
import { PrismaClient, StatCategory } from "./generated/client";

statCategory: StatCategory.FLAT,
statCategory: StatCategory.PERCENTAGE,
```

## 2. Why This Matters

- **Type Safety**: Generated types match the database schema exactly
- **Refactoring**: Changes to schema automatically update types
- **IntelliSense**: Full autocomplete and error checking
- **Consistency**: No risk of typos or mismatched values

## 3. Common Enum Types in This Project

```typescript
import { 
  PrismaClient,
  StatCategory,        // FLAT, PERCENTAGE
  GearType,           // weapon, armor, helm, neck, ring, boot
  GearDisplayName,    // Weapon, Armor, Helmet, Necklace, Ring, Boots
  GearRank,           // Common, Uncommon, Rare, Epic, Heroic
  MainStatType,       // att, def, max_hp, att_rate, def_rate, etc.
  HeroElement,        // Fire, Ice, Earth, Light, Dark
  HeroRarity,         // THREE_STAR, FOUR_STAR, FIVE_STAR, SIX_STAR
  HeroClass           // Warrior, Knight, Ranger, Mage, SoulWeaver, Thief
} from "./generated/client";
```

## 4. Import Pattern

```typescript
// Always import both PrismaClient and needed enums
import { PrismaClient, StatCategory, GearType } from "./generated/client";

const prisma = new PrismaClient();
```

## 5. When Writing Seed Files

### ❌ Avoid
```typescript
const data = {
  statCategory: "FLAT" as const,  // Wrong!
  gearType: "weapon" as const,    // Wrong!
};
```

### ✅ Use
```typescript
const data = {
  statCategory: StatCategory.FLAT,  // Correct!
  gearType: GearType.weapon,        // Correct!
};
```

## 6. Validation

Before committing any Prisma-related code:
1. ✅ Check that all enum values use generated types
2. ✅ Verify imports include necessary enum types
3. ✅ Run `npm run typecheck` to catch any issues
4. ✅ Ensure no `as const` with string literals for enums

## 7. Examples of Correct Usage

### Seed Files
```typescript
const statTypes = [
  {
    statName: "Speed",
    statCategory: StatCategory.FLAT,        // ✅ Correct
    weight: 2.0,
    isMainStat: false,
    isSubstat: true,
  },
  {
    statName: "Attack %",
    statCategory: StatCategory.PERCENTAGE,  // ✅ Correct
    weight: 1.2,
    isMainStat: false,
    isSubstat: true,
  },
];
```

### Component Props
```typescript
interface GearProps {
  type: GearType;           // ✅ Correct
  rank: GearRank;           // ✅ Correct
  mainStat: MainStatType;   // ✅ Correct
}
```

## 8. Remember

- **NEVER use string literals** for Prisma enum fields
- **ALWAYS import and use** generated enum types
- **Check imports** before using any enum values
- **Run typecheck** to catch any violations
- **This rule applies to ALL Prisma operations**: seeds, components, API routes, etc.
description:
globs:
alwaysApply: false
---
