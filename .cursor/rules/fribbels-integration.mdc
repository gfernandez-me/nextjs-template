---
alwaysApply: true
---

# Fribbels Epic 7 Optimizer Integration Guide

## 1. Data Format Specification

### File Structure

- **Format**: JSON with single line structure
- **Top-level Keys**: `items` and `heroes` arrays
- **File Extension**: `.txt` (despite JSON content)
- **Encoding**: UTF-8

### Gear Item Structure (from gear.txt analysis)

```json
{
  "code": "eah7r",
  "ct": 1557926691,
  "e": 101584,
  "f": "set_att",
  "g": 5,
  "id": 1436395815,
  "level": 88,
  "mainStatBaseValue": 0.13,
  "mainStatId": "ah7_ring_m1",
  "mainStatType": "att_rate",
  "mainStatValue": 0.65,
  "mg": 1111,
  "op": [
    ["att_rate", 0.13],
    ["cri", 0.04],
    ["cri_dmg", 0.05],
    ["res", 0.05],
    ["acc", 0.05]
  ],
  "s": "0",
  "statMultiplier": 1,
  "storage": true,
  "tierMultiplier": 1,
  "type": "ring",
  "gear": "Ring",
  "rank": "Epic",
  "set": "AttackSet",
  "name": "Unknown",
  "enhance": 15,
  "main": {
    "type": "AttackPercent",
    "value": 65
  },
  "substats": [
    {
      "type": "CriticalHitChancePercent",
      "value": 7,
      "rolls": 2
    }
  ],
  "ingameId": 1436395815,
  "ingameEquippedId": "undefined"
}
```

## 2. Field Mapping

### Core Fields

- **id/ingameId**: Unique gear identifier (Integer)
- **type**: Gear slot (weapon, armor, helm, neck, ring, boot)
- **gear**: Display name (Weapon, Armor, Helmet, Necklace, Ring, Boots)
- **rank**: Gear rarity (Common, Uncommon, Rare, Epic, Heroic)
- **level**: Gear level (1-88)
- **enhance**: Enhancement level (0-15)
- **set**: Gear set name (SpeedSet, AttackSet, etc.)

### Main Stats

- **mainStatType**: Stat type enum (att, def, max_hp, att_rate, etc.)
- **mainStatValue**: Current main stat value
- **mainStatBaseValue**: Base main stat value
- **statMultiplier**: Stat calculation multiplier
- **tierMultiplier**: Tier-based multiplier

### Substats (op array and substats array)

- **op**: Raw substat rolls array format `[["stat_type", value], ...]`
- **substats**: Processed substats with type, value, and rolls

### Equipment Status

- **storage**: Boolean indicating if in storage
- **ingameEquippedId**: Hero ID if equipped
- **equippedBy**: Hero reference for our database

## 3. Stat Type Mappings

### Fribbels → Our Database

- `att` → `att` (Flat Attack)
- `def` → `def` (Flat Defense)
- `max_hp` → `max_hp` (Flat Health)
- `att_rate` → `att_rate` (Attack %)
- `def_rate` → `def_rate` (Defense %)
- `max_hp_rate` → `max_hp_rate` (Health %)
- `cri` → `cri` (Critical Hit Chance)
- `cri_dmg` → `cri_dmg` (Critical Hit Damage)
- `speed` → `speed` (Speed)
- `acc` → `acc` (Effectiveness)
- `res` → `res` (Effect Resistance)

### Fribbels Substat Types → Our Enums

- `CriticalHitChancePercent` → `cri`
- `CriticalHitDamagePercent` → `cri_dmg`
- `AttackPercent` → `att_rate`
- `DefensePercent` → `def_rate`
- `HealthPercent` → `max_hp_rate`
- `EffectivenessPercent` → `acc`
- `EffectResistancePercent` → `res`
- `Speed` → `speed`
- `Attack` → `att`
- `Defense` → `def`
- `Health` → `max_hp`

## 4. Gear Set Mappings

### Fribbels Set Names → Database

- `AttackSet` → `AttackSet` (4 pieces, +35% Attack)
- `SpeedSet` → `SpeedSet` (4 pieces, +25% Speed)
- `HealthSet` → `HealthSet` (2 pieces, +15% Health)
- `DefenseSet` → `DefenseSet` (2 pieces, +15% Defense)
- `CriticalSet` → `CriticalSet` (2 pieces, +12% Crit Chance)
- `HitSet` → `HitSet` (2 pieces, +20% Effectiveness)
- `DestructionSet` → `DestructionSet` (4 pieces, +40% Crit Damage)
- `LifestealSet` → `LifestealSet` (4 pieces, Heal 20% of damage dealt)
- `CounterSet` → `CounterSet` (4 pieces, 20% chance to counterattack)
- `ImmunitySet` → `ImmunitySet` (2 pieces, Immunity for 1 turn)
- `ResistSet` → `ResistSet` (2 pieces, +20% Effect Resistance)
- `TorrentSet` → `TorrentSet` (2 pieces, +10% Atk, -10% HP)
- `InjurySet` → `InjurySet` (4 pieces, Reduces enemy max HP)
- `PenetrationSet` → `PenetrationSet` (2 pieces, Ignores 15% Defense)
- `UnitySet` → `UnitySet` (2 pieces, +4% Ally Dual Attack Chance)
- `RageSet` → `RageSet` (4 pieces, +30% Crit Dmg vs debuffed targets)
- `ProtectionSet` → `ProtectionSet` (2 pieces, +15% Barrier strength)

## 5. Import Process

### Data Validation Steps

1. **JSON Structure**: Validate top-level items/heroes arrays
2. **Required Fields**: Ensure all mandatory fields present
3. **Enum Validation**: Check gear types, ranks, sets against our enums
4. **Stat Ranges**: Validate stat values within game limits
5. **Relationship Integrity**: Check hero-gear equipment relationships

### Processing Pipeline

1. Parse JSON from uploaded file
2. Extract items and heroes arrays
3. Process each gear item:
   - Map Fribbels fields to our schema
   - Convert substat formats
   - Validate data integrity
   - Create database records
4. Process hero data if present
5. Update equipment relationships

## 6. Export Process

### Export Format (Compatible with Fribbels)

- Generate JSON with same structure as import
- Include all Fribbels-specific fields
- Maintain field naming conventions
- Preserve numeric precision for stats

### Required Fields for Export

- All core gear fields
- Main stat information
- Complete substat arrays (both op and substats formats)
- Equipment status and relationships

## 7. Auto-Importer Integration

### Fribbels Auto-Importer Features

- **Network Packet Capture**: Captures game data via network monitoring
- **Real-time Scanning**: Scans gear while browsing in-game
- **Automatic Export**: Generates gear.txt file automatically
- **Data Validation**: Built-in validation for captured data

### Requirements for Auto-Import

- **Windows**: Python + Npcap
- **Mac**: Python + Wireshark + ChmodBPF
- **Network Access**: Direct network capture or mobile hotspot
- **Game Access**: Epic 7 running on supported platform

## 8. Data Integrity Considerations

### Duplicate Detection

- Use `ingameId` as primary unique identifier
- Check for duplicate entries during import
- Implement merge vs replace strategies

### Version Compatibility

- Monitor Fribbels optimizer updates
- Track data format changes
- Maintain backward compatibility when possible

### Error Handling

- Graceful handling of malformed data
- Detailed error messages for validation failures
- Rollback capabilities for failed imports

## 9. Performance Optimization

### Large Dataset Handling

- Batch processing for bulk imports
- Streaming JSON parser for large files
- Database transaction optimization
- Progress indicators for user feedback

### Memory Management

- Process data in chunks
- Clear intermediate objects
- Optimize database queries
- Use connection pooling

## 10. Future Enhancements

### Planned Features

- Real-time sync with Fribbels optimizer
- Automated update detection
- Enhanced validation rules
- Performance monitoring

### API Compatibility

- REST endpoints matching Fribbels format
- WebSocket support for real-time updates
- GraphQL integration for flexible queries
- Rate limiting and security measures
