# Epic 7 Gear Optimizer - Project Structure

## Application Architecture Overview

### Technology Stack

- **Next.js 15**: App Router with Server and Client Components
- **React 19**: Latest React features and patterns
- **TypeScript**: Full type safety throughout the application
- **Prisma**: ORM for PostgreSQL with generated types
- **Better Auth**: Authentication system with Prisma adapter
- **Tailwind CSS 3**: Utility-first CSS framework
- **shadcn/ui**: Component library built on Radix UI primitives

### Project Structure

```
src/
├── app/                           # Next.js App Router
│   ├── (dashboard)/              # Protected dashboard routes
│   │   ├── gears/                # Gear inventory page
│   │   │   ├── components/       # Page-specific components
│   │   │   │   ├── gear-table/   # Gear table components
│   │   │   │   ├── GearFilters.tsx
│   │   │   │   └── gear-recommendations-form.tsx
│   │   │   ├── data/             # Page-specific data access
│   │   │   │   └── gears.ts      # GearsDataAccess class
│   │   │   └── page.tsx          # Main page component
│   │   ├── heroes/                # Heroes management page
│   │   │   ├── components/       # Page-specific components
│   │   │   ├── data/             # Page-specific data access
│   │   │   │   └── heroes.ts     # HeroesDataAccess class
│   │   │   └── page.tsx          # Main page component
│   │   ├── settings/              # User settings page
│   │   │   ├── components/       # Page-specific components
│   │   │   │   └── settings-form.tsx
│   │   │   ├── data/             # Page-specific data access
│   │   │   │   └── settings.ts   # SettingsDataAccess class
│   │   │   └── page.tsx          # Main page component
│   │   ├── admin/                 # Admin management pages
│   │   │   ├── components/       # Page-specific components
│   │   │   │   └── statistics-content.tsx
│   │   │   ├── data/             # Page-specific data access
│   │   │   │   └── statistics.ts # StatisticsDataAccess class
│   │   │   └── gear-sets/        # Gear sets management
│   │   │       └── page.tsx      # Admin gear sets page
│   │   └── layout.tsx            # Dashboard layout
│   ├── upload/                    # Upload page (public)
│   │   ├── components/           # Page-specific components
│   │   │   └── upload-form.tsx
│   │   └── page.tsx              # Upload page component
│   ├── api/                      # API routes
│   │   ├── upload/               # File upload endpoint
│   │   ├── settings/             # Settings management
│   │   └── scores/               # Score calculation
│   ├── layout.tsx                # Root layout
│   └── page.tsx                  # Home page
├── components/                    # Shared/reusable components
│   ├── ui/                       # shadcn/ui components
│   ├── navigation.tsx            # Main navigation
│   ├── data-table.tsx            # Generic data table
│   └── icons.tsx                 # Icon components
├── lib/                          # Shared utilities and configuration
│   ├── auth.ts                   # Better Auth configuration
│   ├── db.ts                     # Prisma database singleton
│   ├── utils.ts                  # shadcn/ui utilities
│   ├── url.ts                    # URL parameter management
│   ├── url-hooks.ts              # URL hooks for client
│   ├── stats.ts                  # Stat formatting utilities
│   ├── calculate-scores.ts       # Score calculation logic
│   ├── gear-scoring.ts           # Gear scoring utilities
│   └── epic7-data.ts             # Epic 7 reference data
└── prisma/                       # Database schema and migrations
    ├── schema.prisma             # Prisma schema definition
    ├── generated/                 # Generated Prisma client
    └── migrations/                # Database migrations
```

## Data Access Layer (DAL) Architecture

### New Page-Specific Structure

The application has been refactored from a monolithic data access layer to a page-specific structure:

- **Each page has its own data access layer** in a `data/` folder
- **Page-specific components** are located in `components/` folders within each page
- **Shared components** remain in the root `src/components/` folder
- **Generic utilities** stay in `src/lib/` for cross-page use

### Data Access Classes

- **`GearsDataAccess`**: Located in `src/app/(dashboard)/gears/data/gears.ts`
- **`HeroesDataAccess`**: Located in `src/app/(dashboard)/heroes/data/heroes.ts`
- **`SettingsDataAccess`**: Located in `src/app/(dashboard)/settings/data/settings.ts`
- **`StatisticsDataAccess`**: Located in `src/app/(dashboard)/admin/data/statistics.ts`

### Benefits of New Structure

1. **Better Organization**: Each page manages its own data and components
2. **Easier Maintenance**: Changes to one page don't affect others
3. **Clearer Dependencies**: Each page explicitly imports what it needs
4. **Scalability**: New pages can have their own data access without conflicts
5. **Type Safety**: Each DAL class has its own specific types and methods

## Database Schema

### Core Tables

- **`gears`**: Gear items with stats and properties
- **`heroes`**: Epic 7 heroes with equipment slots
- **`gear_sub_stats`**: Individual substats for each gear piece
- **`stat_types`**: Reference table for valid stat types and weights
- **`gear_sets`**: Reference table for gear sets and their effects
- **`users`**: User accounts and settings

### Relationships

- **Gear-Hero**: `gears.equippedBy` references `heroes.ingameId`
- **Gear-Substats**: `gear_sub_stats.gearId` references `gears.id`
- **Substat-StatType**: `gear_sub_stats.statTypeId` references `stat_types.id`
- **User-Settings**: `users.id` references settings tables

## Enum System

### Prisma-Generated Enums

- **`GearType`**: weapon, armor, helm, neck, ring, boot
- **`GearRank`**: Common, Uncommon, Rare, Epic, Heroic
- **`MainStatType`**: All main stat types (att, def, max_hp, etc.)
- **`HeroElement`**: Fire, Ice, Earth, Light, Dark
- **`HeroClass`**: Warrior, Knight, Ranger, Mage, SoulWeaver, Thief

### Usage Pattern

```typescript
import { GearType, GearRank, MainStatType } from "#prisma";

// Always use Prisma enums, never string literals
const gearType: GearType = GearType.WEAPON;
const rank: GearRank = GearRank.EPIC;
```

## Multi-User Architecture

### User Isolation

- **User ID**: All data access is scoped to the authenticated user
- **Row-Level Security**: Database queries include `userId` filters
- **Session Management**: Better Auth handles authentication state

### Data Access Pattern

```typescript
// Each DAL class is instantiated with a user ID
const dal = new GearsDataAccess(session.user.id);

// All operations are automatically scoped to that user
const gears = await dal.getGearsPage({ page: 1, perPage: 20 });
```

## Development Environment

### Prerequisites

- Node.js 18+ and npm
- PostgreSQL 16+
- Docker (for development database)

### Setup Commands

```bash
npm install                    # Install dependencies
npm run db:generate           # Generate Prisma client
npm run db:push               # Push schema to database
npm run dev                   # Start development server
```

### Database Management

```bash
npm run studio               # Open Prisma Studio
npm run db:migrate          # Run migrations
npm run db:reset            # Reset database
```

## Key Architectural Decisions

### 1. Page-Specific Data Access

- **Why**: Better organization and maintainability
- **How**: Each page has its own `data/` folder with DAL classes
- **Benefits**: Easier to understand, modify, and extend

### 2. Prisma-First Approach

- **Why**: Type safety and database consistency
- **How**: All database operations use Prisma with generated types
- **Benefits**: Compile-time error checking, automatic migrations

### 3. Server Component Architecture

- **Why**: Better performance and SEO
- **How**: Pages fetch data server-side, components are client-side when needed
- **Benefits**: Faster initial page loads, better caching

### 4. TypeScript Everywhere

- **Why**: Catch errors at compile time
- **How**: Strict TypeScript configuration with Prisma types
- **Benefits**: Fewer runtime errors, better developer experience

## Migration from Old Architecture

### What Changed

1. **Monolithic DAL**: `src/lib/data-access.ts` → Page-specific DAL classes
2. **Component Organization**: Generic components → Page-specific + shared
3. **Import Paths**: All imports updated to use new file locations
4. **Data Access Pattern**: `createDataAccess()` → Direct class instantiation

### Migration Steps Completed

1. ✅ **Created new folder structure** for each page
2. ✅ **Moved data access files** to page-specific `data/` folders
3. ✅ **Moved page-specific components** to page-specific `components/` folders
4. ✅ **Updated all import paths** to use new file locations
5. ✅ **Removed old monolithic DAL** (`src/lib/data-access.ts`)
6. ✅ **Updated API routes** to use new DAL structure
7. ✅ **Updated utility files** to use new import paths

### Benefits Achieved

- **Cleaner Organization**: Each page is self-contained
- **Easier Maintenance**: Changes are isolated to specific pages
- **Better Scalability**: New pages can follow the same pattern
- **Clearer Dependencies**: Each file explicitly shows what it needs
- **Reduced Coupling**: Pages don't depend on a central DAL

## Future Enhancements

### Planned Improvements

1. **Page-Specific Types**: Each page can define its own type interfaces
2. **Custom Hooks**: Page-specific React hooks for data management
3. **Optimized Queries**: Page-specific query optimization
4. **Caching Strategies**: Page-level caching for better performance

### Best Practices

1. **Keep page-specific code in page folders**
2. **Use shared components for common functionality**
3. **Maintain clear separation between data and presentation**
4. **Follow consistent naming conventions**
5. **Use TypeScript for all new code**
