# Epic 7 Gear Optimizer - Project Structure & Architecture

## 1. Application Architecture Overview

### Technology Stack

- **Next.js 15**: App Router with Server and Client Components
- **React 19**: Modern React with hooks and context
- **TypeScript**: Full type safety throughout the application
- **Prisma**: Database ORM with PostgreSQL
- **Better Auth**: Modern authentication system
- **shadcn/ui**: Component library with Tailwind CSS
- **@tanstack/react-table**: Data table functionality

### Project Structure

```
src/
├── app/                    # Next.js App Router
│   ├── (dashboard)/        # Protected dashboard routes (logged in users)
│   │   ├── home/           # Main dashboard page with statistics overview
│   │   ├── gears/          # Gear inventory management
│   │   ├── heroes/         # Hero management
│   │   ├── gear-priorities/# Gear optimization settings
│   │   ├── settings/       # User settings and preferences
│   │   ├── upload/         # File upload for gear data
│   │   └── layout.tsx      # Dashboard layout with sidebar
│   ├── login/              # Public authentication page
│   ├── signup/             # Public user registration
│   ├── change-password/    # Public password change
│   ├── api/                # Minimal API routes (only essential ones)
│   │   ├── auth/           # Authentication endpoints
│   │   ├── upload/         # File upload processing
│   │   └── settings/       # Settings recalculation (heavy operations)
│   ├── layout.tsx          # Root layout with navigation
│   ├── page.tsx            # Root page (redirects to /home)
│   └── globals.css         # Global styles with shadcn/ui
├── components/             # Shared/generic components
│   ├── navigation.tsx      # Main navigation bar
│   ├── profile-form.tsx    # User profile management
│   ├── settings-form.tsx   # Settings configuration
│   ├── upload-form.tsx     # File upload form
│   ├── gear-table.tsx      # Gear inventory table
│   ├── statistics-content.tsx # Statistics display (used in home dashboard)
│   ├── icons.tsx           # Icon helpers
│   ├── app-sidebar.tsx     # Dashboard sidebar navigation
│   ├── site-header.tsx     # Site header component
│   ├── nav-user.tsx        # User navigation component
│   ├── data-table.tsx      # Reusable data table component
│   └── ui/                 # shadcn/ui primitives
├── hooks/                  # React hooks
│   └── useAuth.ts          # Authentication state management
├── lib/                    # Utilities and configuration
│   ├── auth.ts             # Better Auth configuration
│   ├── auth-client.ts      # Better Auth client
│   ├── data-access.ts      # Data Access Layer (DAL)
│   ├── prisma.ts           # Prisma database singleton
│   ├── decimal.ts          # Prisma decimal conversion utilities
│   ├── epic7-data.ts       # Epic 7 specific data fetching utilities
│   ├── stats.ts            # Epic 7 stat utilities
│   └── utils.ts            # shadcn/ui utilities
└── middleware.ts           # Route protection middleware

├── public/                # Static assets
├── package.json           # Node.js dependencies and scripts
├── tsconfig.json          # TypeScript configuration
├── next.config.ts         # Next.js configuration
├── postcss.config.mjs     # PostCSS configuration
├── tailwind.config.ts     # Tailwind CSS configuration
├── eslint.config.mjs      # ESLint configuration
└── README.md             # Project documentation
```

### Database Schema Architecture

- **Users Table**: User accounts with authentication and relationships
- **Gears Table**: Core gear items with user ownership and enums
- **Heroes Table**: Epic 7 heroes with user ownership and equipment slots
- **GearSubStats Table**: Individual substat records with user ownership and weights
- **StatTypes Table**: Shared reference table for stat definitions
- **Settings Table**: User-specific scoring configuration and thresholds
- **Relationships**: Proper foreign key relationships with user-based data isolation

### Enum System

- **GearType**: weapon, armor, helm, neck, ring, boot
- **GearDisplayName**: Weapon, Armor, Helmet, Necklace, Ring, Boots
- **GearRank**: Common, Uncommon, Rare, Epic, Heroic
- **MainStatType**: All main stat types (att, def, max_hp, etc.)
- **StatCategory**: flat, percentage
- **HeroElement**: Fire, Ice, Earth, Light, Dark
- **HeroRarity**: THREE_STAR, FOUR_STAR, FIVE_STAR
- **HeroClass**: Warrior, Knight, Ranger, Mage, SoulWeaver, Thief

### Multi-User Architecture

The application implements a complete multi-user system with data isolation:

- **User Authentication**: Better Auth with session-based authentication
- **Data Access Layer (DAL)**: Centralized data access with automatic user scoping
- **Route Protection**: Middleware-based authentication for all protected routes
- **User Ownership**: All user data (gears, heroes, settings) includes `userId` field
- **Data Isolation**: Users can only access their own data through database constraints

## 2. Data Flow Architecture

### Direct Database Access Pattern

**NEW APPROACH**: Dashboard pages directly access the database using the Data Access Layer (DAL) instead of going through API routes.

#### Benefits:

- ✅ **Simplified Architecture**: No unnecessary API layer for simple CRUD operations
- ✅ **Better Performance**: Direct database access without HTTP overhead
- ✅ **Type Safety**: Full TypeScript support with Prisma types
- ✅ **Easier Maintenance**: Logic centralized in pages, not scattered across API routes

#### When to Use API Routes:

- **File Uploads**: Complex file processing (Fribbels data import)
- **Heavy Computations**: Settings recalculation across all gears
- **External Integrations**: Webhooks, third-party API calls

#### When NOT to Use API Routes:

- **Simple CRUD**: Gear listing, hero management, settings retrieval
- **Data Display**: Dashboard statistics, gear tables
- **Form Submissions**: Settings updates, gear priority configuration

### Data Access Layer (DAL)

The DAL provides a clean interface for database operations:

```typescript
// Create DAL instance for current user
const dal = createDataAccess(session.user.id);

// Use DAL methods directly in pages
const gears = await dal.getGearsPage({ page: 1, perPage: 10 });
const settings = await dal.getSettings();
```

## 3. Authentication System

### Authentication Architecture

- **Better Auth**: Modern authentication library replacing custom JWT system
- **Session Management**: Server-side session handling with HTTP-only cookies
- **Route Protection**: Middleware-based authentication for all protected routes
- **User Sessions**: Secure session management with automatic expiration

### Authentication Flow

1. **Sign In**: User provides email/password, receives session
2. **Session Storage**: Session stored securely on server
3. **Route Access**: Middleware validates session for protected routes
4. **API Calls**: Essential API endpoints require valid authentication
5. **Sign Out**: Session cleared from server

### Security Features

- **Session-based**: No JWT tokens in client-side code
- **Route Protection**: All dashboard routes protected by default
- **Data Isolation**: Complete user data separation
- **Input Validation**: Comprehensive input sanitization

## 4. Development Environment

### DevContainer Configuration

- **Base Image**: `mcr.microsoft.com/devcontainers/javascript-node:1-22-bookworm`
- **Services**:
  - PostgreSQL 16.3 (Database)
  - Redis 7-alpine (Cache)
  - Node.js application container

### VS Code Extensions

- **Tailwind CSS IntelliSense**: CSS class autocomplete
- **Prettier**: Code formatting
- **ESLint**: Code linting

## 5. Key Architectural Decisions

### 1. Dashboard-First Approach

- **Protected Routes**: All user functionality inside `(dashboard)` folder
- **Public Routes**: Only authentication pages outside dashboard
- **Consistent Layout**: All dashboard pages use sidebar navigation

### 2. Direct Database Access

- **Eliminated Redundancy**: Removed unnecessary API routes
- **Simplified Data Flow**: Pages → DAL → Database
- **Better Performance**: No HTTP overhead for simple operations

### 3. Utility-First Organization

- **Epic 7 Specific**: `epic7-data.ts` for game-specific data fetching
- **Reusable Functions**: Common operations extracted to utility files
- **Clear Separation**: Business logic vs. UI components

### 4. Better Auth Integration

- **Modern Authentication**: Replaced custom JWT with Better Auth
- **Session Management**: Server-side sessions for security
- **Simplified Flow**: No more password hashing in application code

## 6. Migration from Old Architecture

### What Changed

1. **API Routes**: Most CRUD operations moved to dashboard pages
2. **Authentication**: Custom JWT → Better Auth
3. **Data Flow**: API → DAL → Database → Direct DAL → Database
4. **Folder Structure**: `dashboard/` → `home/` for clarity

### What Stayed the Same

1. **Database Schema**: Prisma models unchanged
2. **Business Logic**: Epic 7 rules and validation
3. **Component Structure**: React components and UI patterns
4. **Data Access Layer**: Core DAL functionality

### Benefits of New Architecture

- ✅ **Cleaner Code**: No unnecessary API layer
- ✅ **Better Performance**: Direct database access
- ✅ **Easier Maintenance**: Logic centralized in pages
- ✅ **Modern Auth**: Better Auth integration
- ✅ **Type Safety**: Full Prisma type support
