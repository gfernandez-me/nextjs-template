---
alwaysApply: true
---

# Epic 7 Gear Optimization Business Rules

## 1. Data Structure Overview

### File Information

- **Data Structure**: JSON has top-level `items` and `heroes` keys containing arrays of gear objects and heroes objects
- **Validation**: Each gear object must contain required fields (type, set, rank, level, enhance, mainStat, substats)
- **Hero Information**: Gear objects may include `equippedBy` field indicating which hero has the gear equipped
- **Source**: Data comes from Fribbels' Epic 7 Optimizer auto-importer or manual export

### Database Schema Structure

- **Gears Table**: Core gear items with stats and properties
- **Heroes Table**: Epic 7 heroes with base stats and equipment slots
- **SubStats Table**: Individual substats for each gear piece
- **StatTypes Table**: Reference table for valid stat types and weights
- **GearSets Table**: Reference table for gear sets and their effects
- **Relationships**: Proper foreign key relationships between all tables

## 2. Gear Types and Main Stats

| Gear Type | Main Stat Options    | Icon | Fixed/Variable |
| --------- | -------------------- | ---- | -------------- |
| Weapon    | Flat Attack (Fixed)  | ⚔️   | Fixed          |
| Helm      | Flat Health (Fixed)  | 🪖   | Fixed          |
| Armor     | Flat Defense (Fixed) | 🛡️   | Fixed          |
| Necklace  | Variable             | 📿   | Variable       |
| Ring      | Variable             | 💍   | Variable       |
| Boots     | Variable             | 🥾   | Variable       |

### Fixed Main Stats

- **Weapon**: Flat Attack (always)
- **Helm**: Flat Health (always)
- **Armor**: Flat Defense (always)

### Variable Main Stats

- **Necklace**: Flat Attack, Flat Defense, Flat HP, Atk%, HP%, Def%, Crit Rate%, Crit Damage%
- **Ring**: Flat Attack, Flat Defense, Flat HP, Atk%, HP%, Def%, Effectiveness%, Effect Resistance%
- **Boots**: Flat Attack, Flat Defense, Flat HP, Atk%, HP%, Def%, Speed

### Main Stat Types (Enum)

- **att**: Flat Attack
- **def**: Flat Defense
- **max_hp**: Flat Health
- **att_rate**: Attack Percentage
- **def_rate**: Defense Percentage
- **max_hp_rate**: Health Percentage
- **cri**: Critical Hit Chance
- **cri_dmg**: Critical Hit Damage
- **speed**: Speed
- **acc**: Effectiveness
- **res**: Effect Resistance

## 3. Gear Ranks and Enhancement

### Gear Ranks (Enum)

- **Common**: White (lowest)
- **Uncommon**: Green
- **Rare**: Blue
- **Epic**: Purple
- **Heroic**: Orange (highest)

### Enhancement Levels

- **Range**: 0-15
- **Effect**: Increases main stat value
- **Cost**: Increases with each level
- **Failure**: Possible at higher levels

## 4. Substats Rules

**IMPORTANT**: For detailed stat rules and restrictions, see `.cursor/rules/stat-rules.mdc`

### Available Substats (Any gear)

- Speed
- Flat Attack / Attack%
- Flat Defense / Defense%
- Flat HP / HP%
- Crit Chance
- Crit Damage
- Effectiveness
- Effect Resistance

### Substat Mechanics

- **Rolls**: Each substat can have 1-5 rolls
- **Modified**: Substats can be modified (reforged)
- **Values**: Range from 0 to maximum based on gear rank and type
- **Weight**: Decimal value for optimization calculations
- **Categories**: flat or percentage

### Stat Categories (Enum)

**IMPORTANT**: Always use Prisma-generated enum types, never string literals. See `.cursor/rules/prisma-best-practices.mdc` for details.

- **flat**: Flat stat values (Attack, Defense, Health, Speed)
- **percentage**: Percentage-based stats (Attack%, Defense%, Health%, Crit%, etc.)

## 5. Gear Sets and Effects

| Set Name       | Pieces | Effect                            | Icon |
| -------------- | ------ | --------------------------------- | ---- |
| SpeedSet       | 4      | +25% Speed                        | ⚡   |
| AttackSet      | 4      | +35% Attack                       | ⚔️   |
| HealthSet      | 2      | +15% Health                       | ❤️   |
| DefenseSet     | 2      | +15% Defense                      | 🛡️   |
| CriticalSet    | 2      | +12% Crit Chance                  | 🎯   |
| HitSet         | 2      | +20% Effectiveness                | 🎯   |
| DestructionSet | 4      | +40% Crit Damage                  | 💥   |
| LifestealSet   | 4      | Heal 20% of damage dealt          | 🩸   |
| CounterSet     | 4      | 20% chance to counterattack       | 🔄   |
| ImmunitySet    | 2      | Grants Immunity for 1 turn        | 💪   |
| ResistSet      | 2      | +20% Effect Resistance            | 🛡️   |
| TorrentSet     | 2      | +10% Atk, -10% HP                 | 🌊   |
| InjurySet      | 4      | Reduces enemy max HP              | 💀   |
| PenetrationSet | 2      | Ignores 15% Defense               | ⚡   |
| UnitySet       | 2      | +4% Ally Dual Attack Chance       | 🤝   |
| RageSet        | 4      | +30% Crit Dmg vs debuffed targets | 😠   |
| ProtectionSet  | 4      | +15% Barrier strength             | 🛡️   |
| ReversalSet    | 4      | +15% Speed, +50% CR on revive     | 🔄   |
| RiposteSet     | 4      | 70% counterattack on evade        | ⚔️   |
| RevengeSet     | 4      | +30% Atk when HP < 50%            | 💀   |

## 6. Hero Classes and Elements

### Hero Classes (Enum)

- **Warrior**: Physical damage dealers
- **Knight**: Tank/defensive units
- **Ranger**: Ranged physical damage
- **Mage**: Magic damage dealers
- **SoulWeaver**: Support/healing units
- **Thief**: High speed, utility units

### Hero Elements (Enum)

- **Fire**: Strong vs Earth, Weak vs Ice
- **Ice**: Strong vs Wind, Weak vs Fire
- **Earth**: Strong vs Fire, Weak vs Wind
- **Light**: Neutral, strong vs Dark
- **Dark**: Neutral, strong vs Light

### Hero Rarities (Enum)

- **THREE_STAR**: 3-star heroes
- **FOUR_STAR**: 4-star heroes
- **FIVE_STAR**: 5-star heroes

## 7. Database Relationships

### Gear-Hero Relationships

- **equippedBy**: Gear references hero ingameId when equipped
- **Equipment Slots**: Hero equipment slots reference gear ingameId
  - weaponId: References gear ingameId
  - armorId: References gear ingameId
  - helmetId: References gear ingameId
  - necklaceId: References gear ingameId
  - ringId: References gear ingameId
  - bootId: References gear ingameId

### SubStat Relationships

- **gearId**: References Gears.id (cascade delete)
- **statTypeId**: References StatTypes.id
- **StatTypes**: Contains stat definitions and weights

### Data Integrity

- **Foreign Keys**: All relationships use proper foreign key constraints
- **Cascade Deletes**: SubStats cascade when Gears are deleted
- **Unique Constraints**: ingameId fields are unique across tables
- **Enum Validation**: All enum fields enforce valid values

## 8. Optimization Rules

### Stat Priority Guidelines

- **DPS Units**: High priority on Atk/Crit/Crit Damage/Speed
- **Tank Units**: High priority on HP/Def/Speed
- **Support Units**: High priority on Speed/Effectiveness/Effect Resistance
- **Bruisers**: Balanced priority on Atk/HP/Def/Speed

### Gear Selection Rules

- **Main Stat Priority**: Must match hero role
- **Substat Optimization**: Focus on 2-3 key substats
- **Set Bonuses**: Consider 2-piece and 4-piece set effects
- **Speed Tuning**: Critical for turn order in PvP

### Weight-Based Optimization

- **StatTypes.weight**: Used for optimization calculations
- **SubStats.weight**: Individual substat weights
- **Algorithm**: Weighted scoring system for gear combinations

## 9. Data Import/Export Rules

### Import Validation

- **Required Fields**: type, set, rank, level, enhance, mainStat, substats
- **Data Integrity**: Validate stat ranges and gear combinations
- **Duplicate Detection**: Prevent duplicate gear entries
- **Hero Association**: Link equipped gear to heroes
- **Enum Validation**: Ensure all enum values are valid

### Export Rules

- **Format**: JSON compatible with Fribbels Optimizer
- **Compression**: Include all metadata for optimization
- **Versioning**: Track data format versions
- **Backup**: Maintain data integrity during operations

## 10. Performance Considerations

### Database Optimization

- **Indexing**: Index on ingameId, type, set, rank
- **Relationships**: Efficient hero-gear relationships
- **Queries**: Optimize for common filter combinations
- **Caching**: Cache frequently accessed gear data
- **Foreign Keys**: Proper indexing on relationship fields

### Application Performance

- **Lazy Loading**: Load gear data on demand
- **Pagination**: Handle large gear inventories
- **Search**: Efficient gear filtering and search
- **Real-time Updates**: Handle gear modifications

## 11. Security and Validation

### Data Validation

- **Stat Ranges**: Validate all stat values within game limits
- **Gear Combinations**: Prevent invalid gear setups
- **Hero Compatibility**: Ensure gear matches hero class
- **Set Validation**: Verify set piece requirements
- **Enum Constraints**: Database-level enum validation

### Access Control

- **User Permissions**: Control gear modification access
- **Data Ownership**: Secure user gear data
- **Audit Trail**: Track gear modifications
- **Backup Strategy**: Regular data backups

## 12. Integration Rules

### Epic 7 Optimizer Integration

- **Data Format**: Maintain compatibility with Fribbels format
- **Import Process**: Handle auto-importer data
- **Export Process**: Generate compatible export files
- **Version Sync**: Keep up with optimizer updates

### API Design

- **RESTful Endpoints**: Standard CRUD operations
- **Filtering**: Support complex gear queries
- **Pagination**: Handle large datasets
- **Real-time**: WebSocket for live updates

## 13. Business Logic Implementation

### Gear Management

- **CRUD Operations**: Create, Read, Update, Delete gear
- **Bulk Operations**: Import/export multiple items
- **Validation**: Ensure data integrity
- **Relationships**: Manage hero-gear associations

### Optimization Engine

- **Algorithm**: Implement gear optimization logic
- **Constraints**: Handle hero-specific requirements
- **Performance**: Optimize for speed and accuracy
- **Results**: Rank and present optimization results

### User Experience

- **Interface**: Intuitive gear management UI
- **Feedback**: Clear error messages and validation
- **Progress**: Show import/export progress
- **Help**: Provide guidance for complex operations

## 14. Database Schema Details

### Table Structures

- **gears**: Core gear data with enums and relationships
- **heroes**: Hero data with equipment slot references
- **substats**: Individual substat records with weights
- **stat_types**: Reference table for stat definitions
- **gear_sets**: Reference table for set effects

### Enum Usage

- **GearType**: weapon, armor, helm, neck, ring, boot
- **GearDisplayName**: Weapon, Armor, Helmet, Necklace, Ring, Boots
- **GearRank**: Common, Uncommon, Rare, Epic, Heroic
- **MainStatType**: All main stat types (att, def, max_hp, etc.)
- **StatCategory**: flat, percentage
- **HeroElement**: Fire, Ice, Earth, Light, Dark
- **HeroRarity**: THREE_STAR, FOUR_STAR, FIVE_STAR
- **HeroClass**: Warrior, Knight, Ranger, Mage, SoulWeaver, Thief

## 15. References and External Resources

### Epic Seven Official Resources

- **Epic Seven Official Global Page**: [Epic Seven Global View](https://page.onstove.com/epicseven/global/view/7902683)
  - Official game announcements and updates
  - Hero information and balance changes
  - Event schedules and patch notes
  - Official game mechanics documentation

### Third-Party Tools and Optimizers

- **Fribbels' Epic 7 Optimizer**: [GitHub Repository](https://github.com/fribbels/Fribbels-Epic-7-Optimizer)
  - Comprehensive gear optimization tool
  - Auto-importer for gear data extraction
  - Compatible data format standards
  - Optimization algorithms and calculation methods
  - Community-maintained gear and hero databases
  - Export/import functionality for gear management

## 16. Visual Scoring System (Fribbels-Style)

### Color-Coded Score Display

**IMPORTANT**: The application uses a Fribbels-inspired color-coded scoring system for better visual identification of gear quality.

#### Score Color Scheme

**IMPORTANT**: All columns (F Score, Score, Main Stats, Substats) use the **same consistent color scheme** with inline styles for maximum compatibility:

- **Dark Green** (`#16a34a`): Excellent scores (≥85) - **Best** tier gear
- **Light Green** (`#22c55e`): Good scores (65-84) - **Good** tier gear
- **Yellow** (`#fef08a`): Average scores (45-64) - **Mid** tier gear
- **Light Red** (`#fca5a5`): Poor scores (25-44) - **Between mid and bad** tier gear
- **Red** (`#dc2626`): Terrible scores (<25) - **Bad** tier gear

**Note**: Thresholds adjusted based on Epic 7 gear score ranges (typically 0-100+). More green = better quality.

#### Implementation

- **File**: `src/lib/score-colors.ts` - **Single source of truth** for all color logic
- **Functions**:
  - `formatScoreWithColor()` - Overall scores (F Score, Score) with inline styles
  - `formatSubstatWithColor()` - Main stats and substats with inline styles
  - `getScoreQuality()` - Quality tier determination
  - `getGearTypeIcon()` - Gear type icons (Fribbels-style)
  - `getGearRankClasses()` - Gear rank color classes
- **Usage**: Applied to **ALL** columns (F Score, Score, Main Stats, Substats) in gear tables
- **Consistency**: All columns use the **same color scheme** and **inline styles** for maximum compatibility
- **Customization**: Score thresholds can be adjusted via `ScoreColorConfig` interface

#### Visual Benefits

- **Instant Recognition**: Users can quickly identify gear quality at a glance
- **Consistent UI**: Same color scheme across all pages with gear data
- **Fribbels Compatibility**: Matches the visual language users expect from Fribbels Optimizer

### Theme Toggle

**IMPORTANT**: The application uses a simple light/dark theme toggle instead of a dropdown menu.

#### Implementation

- **File**: `src/components/mode-toggle.tsx`
- **Functionality**: Simple toggle between light and dark themes
- **Icons**: Sun icon for light mode, Moon icon for dark mode
- **Behavior**: Clicking toggles between light and dark themes only (no system theme option)

#### Usage

- **Theme Toggle**: Located in the header/sidebar for easy access
- **Persistence**: Theme preference is saved and restored on page reload
- **Accessibility**: Includes screen reader support with proper ARIA labels

## 17. GitHub MCP Server Usage Rules

### Repository Configuration

**IMPORTANT**: When using the GitHub MCP server, ALWAYS use the following configuration:

- **owner**: `"gfernandez-me"`
- **repo**: `"Fribbels-Epic-7-Optimizer"`

### Usage Guidelines

- **DO NOT** search or read from any other repository, even if search results look relevant
- **Prefer** GitHub code search over generic web search for Epic 7 related queries
- **Always** pass owner/repo explicitly if any tool requires repository parameters
- **Focus** on the official Fribbels Epic 7 Optimizer repository as the authoritative source

### Example Usage

```typescript
// ✅ CORRECT - Always specify the Fribbels repository
mcp_GitHub_search_code({
  query: "gear scoring calculation",
  owner: "fribbels",
  repo: "Fribbels-Epic-7-Optimizer",
});

// ❌ WRONG - Don't search other repositories
mcp_GitHub_search_code({
  query: "gear scoring calculation",
  // Missing owner/repo specification
});
```

## 18. Centralized Logic Architecture

### Core Utility Files (Single Source of Truth)

**IMPORTANT**: All core logic is centralized in specific files to avoid duplication and ensure consistency across the application.

#### Hero Data Management

- **File**: `src/lib/epic7-validation.ts`
- **Purpose**: Centralized hero data processing, validation, and Fribbels API integration
- **Key Functions**:
  - `extractHeroMetadata()` - Extract hero element, class, rarity from Fribbels API
  - `getHeroMetadataFromFribbels()` - Get hero data by code
  - `getHeroMetadataByNameFromFribbels()` - Get hero data by name
  - `validateHeroData()` - Validate and cast hero data
  - `validateHeroElement()`, `validateHeroClass()`, `validateHeroRarity()` - Type validation
  - `clearHeroDataCache()` - Clear Fribbels API cache

#### Gear Set Management

- **File**: `src/lib/gear-sets.ts`
- **Purpose**: Centralized gear set definitions and utilities
- **Key Functions**:
  - `GEAR_SETS` - Complete registry of all gear sets
  - `getGearSetFilterOptions()` - UI dropdown options
  - `getGearSetInfo(setName)` - Get specific gear set info
  - `getGearSetsByCategory()` - Filter by primary/secondary
  - `isValidGearSet(setName)` - Validate gear set names

#### Visual Scoring System

- **File**: `src/lib/score-colors.ts`
- **Purpose**: Centralized color-coded scoring display utilities
- **Key Functions**:
  - `formatScoreWithColor()` - Format scores with color coding
  - `getScoreQuality()` - Determine score quality level
  - `getScoreColorClasses()` - Get CSS classes for score colors
  - `getGearTypeIcon()` - Get gear type icons (Fribbels-style)
  - `getGearRankClasses()` - Get gear rank color classes
  - `formatSubstatWithColor()` - Format individual substat values with color coding
  - `getSubstatColorClasses()` - Get CSS classes for substat values based on quality

**IMPORTANT**: This file consolidates all visual scoring and gear icon functionality. The old `src/components/icons.tsx` file has been removed and its functions (`getGearIcon`, `getRankColor`) have been replaced with the enhanced versions in this file.

**Substat Color Coding**: Individual substat values now use color-coded backgrounds based on their quality relative to Epic 7's stat roll ranges:

- **Super Light Green** (`bg-green-100 text-black`): Best rolls (excellent tier) - Attack%/Defense%/Health% 20%+, Critical Chance 12%+, Critical Damage 20%+, Speed 20%+, Flat HP 700%+
- **Light Green** (`bg-green-200 text-black`): Very good rolls (good tier) - Attack%/Defense%/Health% 16%+, Critical Chance 10%+, Critical Damage 15%+, Speed 17%+, Flat HP 400%+
- **Medium Green** (`bg-green-300 text-black`): Mid to good rolls (average tier) - Attack%/Defense%/Health% 12%+, Critical Chance 8%+, Critical Damage 10%+, Speed 15%+, Flat HP 300%+
- **Yellow** (`bg-yellow-200 text-black`): Mid to bad rolls (poor tier) - Attack%/Defense%/Health% 8%+, Critical Chance 6%+, Critical Damage 6%+, Speed 12%+, Flat HP 200%+
- **Dark Red** (`bg-red-600 text-white`): Worse rolls (terrible tier) - Below poor thresholds, most low flat stats

**Contrast Improvements**: The color system now uses consistent text colors (black for light backgrounds, white for dark backgrounds) with high-contrast background colors for optimal visibility in both light and dark modes. The red color for bad stats uses `bg-red-600` with white text for maximum contrast and visibility.

**Note**: Thresholds are based on Epic 7's actual substat ranges from user gear data analysis and are adjusted dynamically based on gear enhancement level. Speed 17+ now correctly shows as light green (very good), and flat HP 400+ shows as light green (very good).

#### URL Parameter Management

- **File**: `src/lib/url.ts`
- **Purpose**: Centralized URL parameter parsing and state management
- **Key Functions**:
  - `parseGearSearchParams()` - Parse gear table filters
  - `parseHeroSearchParams()` - Parse hero table filters
  - `getDefaultGearFilters()` - Default gear filter values
  - `getDefaultHeroFilters()` - Default hero filter values

### Data Access Layer Pattern

**IMPORTANT**: Each page has its own data access layer following the pattern:

```
src/app/(dashboard)/[page]/
├── data/
│   └── [page].ts          # Data access class
├── components/
│   └── [page]-table.tsx   # Table component
└── page.tsx               # Server component
```

#### Example Structure

- **Gears**: `src/app/(dashboard)/gears/data/gears.ts`
- **Heroes**: `src/app/(dashboard)/heroes/data/heroes.ts`
- **Upload**: `src/app/(dashboard)/upload/data/upload.ts`

### Import Patterns

**IMPORTANT**: Always use the centralized utilities and follow these import patterns:

#### For Hero Data

```typescript
import {
  extractHeroMetadata,
  validateHeroData,
  HeroMetadata,
} from "@/lib/epic7-validation";
```

#### For Gear Sets

```typescript
import {
  getGearSetFilterOptions,
  getGearSetInfo,
  GEAR_SETS,
} from "@/lib/gear-sets";
```

#### For URL Management

```typescript
import {
  parseGearSearchParams,
  parseHeroSearchParams,
  type GearFilters,
  type HeroFilters,
} from "@/lib/url";
```

### Development Guidelines

#### When Adding New Hero Features

1. **Check**: `src/lib/epic7-validation.ts` for existing hero functions
2. **Add**: New hero functions to `epic7-validation.ts` (not separate files)
3. **Update**: Import statements in consuming files
4. **Test**: Ensure TypeScript compilation and no linting errors

#### When Adding New Gear Sets

1. **Check**: `src/lib/gear-sets.ts` for existing gear set definitions
2. **Add**: New gear sets to `GEAR_SETS` object
3. **Update**: `prisma/seed.ts` to include new sets in database
4. **Test**: Verify gear set appears in UI filters

#### When Adding New URL Parameters

1. **Check**: `src/lib/url.ts` for existing parameter parsing
2. **Add**: New parameters to appropriate filter interfaces
3. **Update**: Parsing functions to handle new parameters
4. **Test**: Verify URL state management works correctly

### File Organization Rules

#### DO NOT Create These Files

- ❌ `src/lib/hero-*.ts` - Use `epic7-validation.ts` instead
- ❌ `src/lib/gear-*.ts` - Use `gear-sets.ts` instead
- ❌ `src/lib/url-*.ts` - Use `url.ts` instead
- ❌ Duplicate utility files for the same purpose

#### DO Create These Files

- ✅ `src/app/(dashboard)/[page]/data/[page].ts` - Page-specific data access
- ✅ `src/app/(dashboard)/[page]/components/[page]-table.tsx` - Page-specific components
- ✅ `src/components/ui/[component].tsx` - Reusable UI components

### Testing and Validation

#### Before Making Changes

1. **Check**: Existing centralized functions in core utility files
2. **Verify**: No duplication of functionality
3. **Test**: TypeScript compilation with `npm run typecheck`
4. **Lint**: Run linting to ensure code quality

#### After Making Changes

1. **Update**: All import statements to use centralized functions
2. **Remove**: Any duplicate or obsolete files
3. **Test**: Full application functionality
4. **Document**: Update this rules file if new patterns are established

### Common Anti-Patterns to Avoid

#### ❌ Duplicate Utility Files

```typescript
// DON'T DO THIS
src / lib / hero - metadata.ts;
src / lib / hero - validation.ts;
src / lib / hero - api.ts;

// DO THIS INSTEAD
src / lib / epic7 - validation.ts; // All hero utilities here
```

#### ❌ Scattered Logic

```typescript
// DON'T DO THIS
// Hero logic in multiple files
src / components / hero - table.tsx; // Hero processing logic
src / pages / heroes.tsx; // More hero processing logic

// DO THIS INSTEAD
src / lib / epic7 - validation.ts; // All hero logic centralized
src / components / hero - table.tsx; // Just UI components
```

#### ❌ Hardcoded Values

```typescript
// DON'T DO THIS
const gearSets = ["SpeedSet", "AttackSet", "HealthSet"];

// DO THIS INSTEAD
import { GEAR_SETS } from "@/lib/gear-sets";
const gearSets = Object.keys(GEAR_SETS);
```

## 19. Upload Process and Logging

### File-Based Logging System

**IMPORTANT**: The upload process uses file-based logging to prevent console spam and provide detailed analysis.

#### Log Files

- **`upload-gear-log.txt`**: Detailed gear processing log with scores, grades, and summary statistics
- **`upload-hero-log.txt`**: Detailed hero processing log with metadata and distribution analysis
- **Location**: Root directory (`process.cwd()`)
- **Replacement**: Log files are replaced on each upload (no accumulation)
- **Git Ignore**: Both log files are added to `.gitignore`

#### Log Content Structure

**Gear Log Format:**

```
=== GEAR UPLOAD LOG - [timestamp] ===
Total gears processed: [count]
Showing first 5 gears with their scores and grades:

Gear [id]: fScore=[score] ([grade]), score=[score] ([grade])
  Substat [id]: [statName]=[value] ([grade])
  ...

=== SUMMARY ===
✅ Successfully processed [count] gear items
📊 Grade distribution:
   - EXCELLENT: [count] gears
   - GOOD: [count] gears
   - AVERAGE: [count] gears
   - POOR: [count] gears
   - TERRIBLE: [count] gears

🔧 New gear sets detected:
   - ReversalSet: [count] gears
   - RiposteSet: [count] gears
   - RevengeSet: [count] gears
```

**Hero Log Format:**

```
=== HERO UPLOAD LOG - [timestamp] ===
Total heroes processed: [count]
Showing first 5 heroes with their metadata:

Hero [id]: [name] ([element] [rarity] [class])
...

=== SUMMARY ===
✅ Successfully processed [count] heroes
📊 Hero distribution by element:
   - FIRE: [count] heroes
   - ICE: [count] heroes
   - EARTH: [count] heroes
   - LIGHT: [count] heroes
   - DARK: [count] heroes

📊 Hero distribution by class:
   - WARRIOR: [count] heroes
   - KNIGHT: [count] heroes
   - RANGER: [count] heroes
   - MAGE: [count] heroes
   - SOUL_WEAVER: [count] heroes
   - THIEF: [count] heroes
```

#### Upload Process Optimization

- **Upsert Operations**: Uses `prisma.upsert()` for both gears and heroes to handle existing records
- **Limited Logging**: Only logs first 5 items to prevent file bloat
- **Clean Terminal**: Minimal console output (only essential progress logs)
- **Performance**: Optimized for large datasets (1400+ gears, 300+ heroes)

#### Debug State Management

**IMPORTANT**: Debug logs are kept in place unless explicitly requested to be removed:

- **Keep**: Essential upload progress logs (`[UPLOAD DEBUG]`)
- **Keep**: Log file generation and summary
- **Keep**: Error logging for troubleshooting
- **Remove Only**: When user explicitly requests removal

### Maintenance Checklist

When working on heroes or gears:

- [ ] Check centralized utility files first
- [ ] Avoid creating duplicate functionality
- [ ] Use proper import patterns
- [ ] Follow data access layer pattern
- [ ] Test TypeScript compilation
- [ ] Update this rules file if needed
- [ ] Remove obsolete files after refactoring
- [ ] Check upload log files for processing verification
- [ ] Maintain debug state unless explicitly requested to change
