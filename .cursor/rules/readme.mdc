# Epic 7 Gear Optimizer - Cursor Rules & Context

## Overview

This folder contains all the rules, context, and documentation for the Epic 7 Gear Optimizer project. The goal is to centralize information and prevent common mistakes.

## 📁 File Structure

### Core Rules (Root Level)

- **`business-rules.mdc`** - Epic 7 game mechanics and business logic (generic)
- **`stat-rules.mdc`** - Comprehensive stat behavior and restrictions (generic)
- **`prisma-best-practices.mdc`** - Database and Prisma usage rules (generic)
- **`project-structure.mdc`** - Application architecture and project organization (generic)
- **`nextjs-implementation.mdc`** - Next.js 15 + App Router patterns (generic)
- **`auth-implementation.mdc`** - Better Auth integration (generic)

### Page-Specific Business Rules

- **`pages/home.mdc`** - Home dashboard business rules and requirements
- **`pages/gears.mdc`** - Gear management page business rules
- **`pages/heroes.mdc`** - Hero management page business rules
- **`pages/gear-recommendations.mdc`** - Gear optimization preferences business rules
- **`pages/settings.mdc`** - User settings and scoring configuration business rules
- **`pages/upload.mdc`** - File upload and Fribbels integration business rules
- **`pages/auth.mdc`** - Authentication pages business rules
- **`pages/admin.mdc`** - Admin functionality business rules
- **`pages/gear-set.mdc`** - Gear set management business rules
- **`pages/statistic.mdc`** - Statistics and analytics business rules

## 🎯 Key Principles

### 1. Always Use Prisma Generated Types

```typescript
// ❌ WRONG
statCategory: "FLAT" as const;

// ✅ CORRECT
statCategory: StatCategory.FLAT;
```

### 2. Follow Epic 7 Game Rules

- **Weapons**: Fixed flat attack main stat
- **Helms**: Fixed flat health main stat
- **Armor**: Fixed flat defense main stat
- **Right-side gear**: Variable main stats with restrictions

### 3. Use Better Auth for Authentication

- Passwords live in `Account.password` (hashed by Better Auth)
- Credentials provider uses `providerId = "credential"`
- Session-based authentication with Prisma adapter

### 4. Clean Architecture

- **Dashboard-First**: All user functionality in `(dashboard)` folder
- **Direct Database Access**: Pages → DAL → Database (no unnecessary API routes)
- **Utility-First**: Common operations in focused utility files

## 🔧 Quick Reference

### Stat Categories

- **FLAT**: Speed, Attack, Defense, Health
- **PERCENTAGE**: Attack%, Defense%, Health%, Crit%, Crit Dmg%, Effectiveness%, Effect Resist%

### Gear Types

- **Left Side**: Weapon (⚔️), Helm (🪖), Armor (🛡️) - Fixed main stats
- **Right Side**: Necklace (📿), Ring (💍), Boots (🥾) - Variable main stats

### Database Schema

- **Users**: Better Auth integration
- **Gears**: Epic 7 gear items with stats
- **StatTypes**: Reference data with gear-specific restrictions (allowedMainStatFor, allowedSubstatFor)
- **Settings**: User-specific optimization preferences

## 🚨 Common Mistakes to Avoid

1. **Using string literals instead of Prisma enums**
2. **Forgetting gear-type-specific stat restrictions**
3. **Mixing old auth patterns with Better Auth**
4. **Using deprecated database fields**
5. **Creating unnecessary API routes for simple CRUD operations**

## 💻 Running via Cursor Chat

### Non-Interactive Execution

When running commands through Cursor chat in the devcontainer, use the **CI variants** to prevent hanging:

```bash
# ❌ These may hang in chat
npm run dev          # Development server (interactive)
npm run lint         # Linting (may have prompts)

# ✅ Use these for chat execution
npm run typecheck    # Type checking (fastest validation)
npm run lint:ci      # Non-interactive linting
```

### Command Wrapper

For complex commands, use the non-interactive wrapper:

```bash
.devcontainer/run-noninteractive.sh 'npm run typecheck && npm run lint'
```

### What NOT to Run in Chat

- **Development servers** (`npm run dev`) - Use terminal
- **Interactive tools** (Prisma Studio, git with prompts)
- **Long-running processes** - Use terminal with `&` or `screen`

## 📚 Reading Order

1. **Start with**: `business-rules.mdc` for game mechanics
2. **Then**: `stat-rules.mdc` for detailed stat behavior
3. **Next**: `prisma-best-practices.mdc` for database patterns
4. **Then**: `project-structure.mdc` for architecture overview
5. **Next**: Implementation guides for specific features
6. **Finally**: Page-specific business rules in `pages/` folder

## 🔄 Updates

When making changes:

1. Update the relevant rule file
2. Update this README if needed
3. Ensure consistency across all files
4. Run `npm run typecheck` to catch type issues quickly

## 📝 Contributing

When adding new rules:

1. Create a focused, single-purpose file
2. Reference related rules
3. Include examples and counter-examples
4. Update this README

## 📋 Page-Specific Rules Status

- ✅ **Home Dashboard** - Basic structure created, content needed
- ✅ **Gears Management** - Basic structure created, content needed
- ✅ **Heroes Management** - Basic structure created, content needed
- ✅ **Gear Recommendations** - Basic structure created, content needed
- ✅ **Settings** - Basic structure + scoring rules added, other content needed
- ✅ **Upload** - Basic structure + Fribbels integration added, other content needed
- ✅ **Authentication** - Basic structure created, content needed
- ✅ **Admin** - Basic structure created, content needed
- ✅ **Gear Set Management** - Complete business rules available
- ✅ **Statistics** - Basic structure created, content needed
