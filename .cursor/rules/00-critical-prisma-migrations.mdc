CRITICAL: Prisma migrations policy (highest priority)

- Never edit existing Prisma migration files manually. Do not rewrite, squash, or rebase migration history to “fix” issues.
- Always make changes only in `prisma/schema.prisma`, then generate a new migration via:
  - `npx prisma migrate dev --name <change-summary>` (local/dev)
  - `npx prisma migrate deploy` (staging/prod)
- Avoid `--create-only` unless there is an explicit, documented reason. Prefer allowing Prisma to apply the migration locally during development.
- Do not use `prisma db push` for environments managed by migrations (especially staging/production). `db push` is only acceptable for quick prototypes with throwaway data.
- Drift handling:
  - If Prisma reports “drift detected,” it means the database schema differs from the migration history (e.g., out‑of‑band changes, `db push`, manual SQL, or an old DB state).
  - Do NOT modify past migrations. Instead, in development run `npx prisma migrate reset` to realign the database to the migration history (this drops and recreates the dev DB; back up if needed).
  - In shared environments, coordinate reset carefully; never reset staging/production. Use `migrate deploy` only.
- Safety:
  - Never perform destructive operations (like `migrate reset`) automatically. Ask for explicit approval first. Use `--force` only in CI or when explicitly approved.
- After every schema change or migration, always regenerate the client: `npx prisma generate`.

Rationale

- This ensures a clean, append‑only migration history, prevents accidental data loss, and avoids long‑term inconsistencies caused by out‑of‑band edits.
