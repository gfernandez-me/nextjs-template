model StatTypes {
  id                      Int                      @id @default(autoincrement())
  statName                String                   @unique
  statCategory            StatCategory
  weight                  Decimal                  @db.Decimal(5, 2)
  allowedMainStatFor      GearType[]
  allowedSubstatFor       GearType[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  originalStatName        String                   @unique
  GearRecommendationItem1 GearRecommendationItem[] @relation("StatType1")
  GearRecommendationItem2 GearRecommendationItem[] @relation("StatType2")
  GearRecommendationItem3 GearRecommendationItem[] @relation("StatType3")
  GearRecommendationItem4 GearRecommendationItem[] @relation("StatType4")
  GearSubStats            GearSubStats[]

  @@map("stat_types")
}

model GearSets {
  id                Int      @id @default(autoincrement())
  setName           String   @unique
  piecesRequired    Int
  effectDescription String
  icon              String
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("gear_sets")
}

model GearSubStats {
  id         Int       @id @default(autoincrement())
  gearId     Int
  statTypeId Int
  statValue  Decimal   @db.Decimal(10, 2)
  rolls      Int
  weight     Decimal   @db.Decimal(5, 2)
  isModified Boolean   @default(false)
  userId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Gear       Gears     @relation(fields: [gearId], references: [id], onDelete: Cascade)
  StatType   StatTypes @relation(fields: [statTypeId], references: [id])
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("gear_substats")
}

model Gears {
  id                Int            @id @default(autoincrement())
  ingameId          BigInt
  code              String?
  type              GearType
  rank              GearRank
  level             Int
  enhance           Int
  fScore            Float?
  score             Float?
  mainStatType      MainStatType
  mainStatValue     Float
  mainStatBaseValue Float
  statMultiplier    Float
  tierMultiplier    Float
  storage           Boolean        @default(true)
  equipped          Boolean        @default(false)
  userId            String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  set               String
  heroId            Int?
  ingameEquippedId  BigInt?
  GearSubStats      GearSubStats[]
  Hero              Heroes?        @relation(fields: [heroId], references: [id])
  User              User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ingameId, userId])
  @@index([createdAt])
  @@index([rank])
  @@index([enhance])
  @@index([equipped])
  @@index([userId])
  @@index([set])
  @@map("gears")
}

model Heroes {
  id                Int          @id @default(autoincrement())
  ingameId          BigInt
  name              String
  count             Int          @default(1) // Track duplicate instances
  element           HeroElement?
  rarity            HeroRarity?
  class             HeroClass?
  attack            Int?
  defense           Int?
  health            Int?
  speed             Int?
  criticalHitChance Int?
  criticalHitDamage Int?
  effectiveness     Int?
  effectResistance  Int?
  weaponId          Int?
  armorId           Int?
  helmetId          Int?
  necklaceId        Int?
  ringId            Int?
  bootId            Int?
  userId            String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  Gears Gears[]
  User  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ingameId, userId])
  @@index([userId])
  @@index([ingameId, userId])
  @@map("heroes")
}

enum GearType {
  WEAPON
  ARMOR
  HELM
  NECK
  RING
  BOOTS
}

enum GearRank {
  COMMON
  UNCOMMON
  RARE
  EPIC
  HEROIC
}

enum MainStatType {
  ATT
  DEF
  MAX_HP
  ATT_RATE
  DEF_RATE
  MAX_HP_RATE
  CRI
  CRI_DMG
  SPEED
  ACC
  RES
}

enum StatCategory {
  FLAT
  PERCENTAGE
}

enum HeroElement {
  FIRE
  ICE
  EARTH
  LIGHT
  DARK
}

enum HeroRarity {
  THREE_STAR
  FOUR_STAR
  FIVE_STAR
  SIX_STAR
}

enum HeroClass {
  WARRIOR
  KNIGHT
  RANGER
  MAGE
  SOUL_WEAVER
  THIEF
}
