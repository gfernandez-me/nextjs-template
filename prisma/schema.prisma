// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Epic 7 Gear Types
enum GearType {
  weapon
  armor
  helm
  neck
  ring
  boot
}

// Epic 7 Gear Display Names
enum GearDisplayName {
  Weapon
  Armor
  Helmet
  Necklace
  Ring
  Boots
}

// Epic 7 Gear Ranks
enum GearRank {
  Common
  Uncommon
  Rare
  Epic
  Heroic
}

// Epic 7 Main Stat Types
enum MainStatType {
  att
  def
  max_hp
  att_rate
  def_rate
  max_hp_rate
  cri
  cri_dmg
  speed
  acc
  res
}

// Epic 7 Stat Categories
enum StatCategory {
  flat
  percentage
}

// Epic 7 Hero Elements
enum HeroElement {
  Fire
  Ice
  Earth
  Light
  Dark
}

// Epic 7 Hero Rarities
enum HeroRarity {
  THREE_STAR
  FOUR_STAR
  FIVE_STAR
}

// Epic 7 Hero Classes
enum HeroClass {
  Warrior
  Knight
  Ranger
  Mage
  SoulWeaver
  Thief
}

// Reference table for valid stat types and their weights
model StatTypes {
  id           Int          @id @default(autoincrement())
  statName     String       @unique // Speed, Attack, Defense, etc.
  statCategory StatCategory // flat, percentage
  weight       Decimal      @db.Decimal(5, 2) // Weight for optimization calculations
  isMainStat   Boolean      @default(false)
  isSubstat    Boolean      @default(true)
  createdAt    DateTime     @default(now())

  // Relationships
  substats SubStats[]

  @@map("stat_types")
}

// Reference table for gear sets and their effects
model GearSets {
  id                Int      @id @default(autoincrement())
  setName           String   @unique // SpeedSet, AttackSet, etc.
  piecesRequired    Int // 2 or 4
  effectDescription String // +25% Speed, +35% Attack, etc.
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())

  @@map("gear_sets")
}

// Individual substats for each gear
model SubStats {
  id         Int      @id @default(autoincrement())
  gearId     Int
  statTypeId Int
  statValue  Decimal  @db.Decimal(10, 2)
  rolls      Int // 0-5
  weight     Decimal  @db.Decimal(5, 2)
  isModified Boolean  @default(false) // Whether this substat was modified (reforged)
  createdAt  DateTime @default(now())

  // Relationships
  gear     Gears     @relation(fields: [gearId], references: [id], onDelete: Cascade)
  statType StatTypes @relation(fields: [statTypeId], references: [id])

  @@map("substats")
}

model Gears {
  id Int @id @default(autoincrement())

  // Epic 7 Optimizer specific fields
  ingameId Int             @unique // Original game ID (verified as Int from gear.txt)
  code     String // Gear code identifier
  name     String          @default("Unknown")
  type     GearType // weapon, armor, helm, neck, ring, boot
  gear     GearDisplayName // Display name: Weapon, Armor, Helmet, Necklace, Ring, Boots
  rank     GearRank // Common, Uncommon, Rare, Epic, Heroic
  level    Int
  enhance  Int // Enhancement level (0-15)

  // Main stat
  mainStatType      MainStatType // att, def, max_hp, att_rate, def_rate, max_hp_rate, cri, cri_dmg, speed, acc, res
  mainStatValue     Float
  mainStatBaseValue Float

  // Additional properties
  statMultiplier Float
  tierMultiplier Float
  storage        Boolean @default(true)
  equipped       Boolean @default(false)

  // Equipment relationship - references hero ingameId
  equippedBy       Int? // Hero ingameId if equipped
  ingameEquippedId String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  hero     Heroes?    @relation(fields: [equippedBy], references: [ingameId])
  substats SubStats[]

  @@map("gears")
}

model Heroes {
  id Int @id @default(autoincrement())

  // Epic 7 specific fields
  ingameId Int          @unique // Original game ID (verified as Int from gear.txt)
  name     String
  element  HeroElement? // Fire, Ice, Earth, Light, Dark
  rarity   HeroRarity? // 3*, 4*, 5*
  class    HeroClass? // Warrior, Knight, Ranger, Mage, Soul Weaver, Thief

  // Stats (base stats from hero data)
  attack            Int?
  defense           Int?
  health            Int?
  speed             Int?
  criticalHitChance Int?
  criticalHitDamage Int?
  effectiveness     Int?
  effectResistance  Int?

  // Equipment slots (using gear ingameId references)
  weaponId   Int? // References gear ingameId
  armorId    Int? // References gear ingameId
  helmetId   Int? // References gear ingameId
  necklaceId Int? // References gear ingameId
  ringId     Int? // References gear ingameId
  bootId     Int? // References gear ingameId

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  gears Gears[] // All gears equipped by this hero

  @@map("heroes")
}
