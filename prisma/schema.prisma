// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  seed     = "npx tsx prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Epic 7 Gear Types
enum GearType {
  WEAPON
  ARMOR
  HELM
  NECK
  RING
  BOOTS
}

// Epic 7 Gear Ranks
enum GearRank {
  COMMON
  UNCOMMON
  RARE
  EPIC
  HEROIC
}

// Epic 7 Main Stat Types
enum MainStatType {
  ATT
  DEF
  MAX_HP
  ATT_RATE
  DEF_RATE
  MAX_HP_RATE
  CRI
  CRI_DMG
  SPEED
  ACC
  RES
}

// Epic 7 Stat Categories
enum StatCategory {
  FLAT
  PERCENTAGE
}

// Epic 7 Hero Elements
enum HeroElement {
  FIRE
  ICE
  EARTH
  LIGHT
  DARK
}

// Epic 7 Hero Rarities
enum HeroRarity {
  THREE_STAR
  FOUR_STAR
  FIVE_STAR
  SIX_STAR
}

// Epic 7 Hero Classes
enum HeroClass {
  WARRIOR
  KNIGHT
  RANGER
  MAGE
  SOUL_WEAVER
  THIEF
}

// Reference table for valid stat types and their weights
model StatTypes {
  id           Int          @id @default(autoincrement())
  statName     String       @unique // Speed, Attack, Defense, etc.
  statCategory StatCategory // FLAT, PERCENTAGE
  weight       Decimal      @db.Decimal(5, 2) // Weight for optimization calculations

  // Gear-specific restrictions - which gear types can have this stat as main stat or substat
  allowedMainStatFor GearType[] // Array of gear types that can have this as main stat
  allowedSubstatFor  GearType[] // Array of gear types that can have this as substat

  // Relationships
  GearSubStats     GearSubStats[]
  // Back-relations to gear priorities ordered substats
  GearPrioritySub1 GearPriorities[] @relation("PrioritySub1")
  GearPrioritySub2 GearPriorities[] @relation("PrioritySub2")
  GearPrioritySub3 GearPriorities[] @relation("PrioritySub3")
  GearPrioritySub4 GearPriorities[] @relation("PrioritySub4")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stat_types")
}

// Reference table for gear sets and their effects
model GearSets {
  id                Int     @id @default(autoincrement())
  setName           String  @unique // SpeedSet, AttackSet, etc.
  piecesRequired    Int // 2 or 4
  effectDescription String // +25% Speed, +35% Attack, etc.
  isActive          Boolean @default(true)

  GearPriorities GearPriorities[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("gear_sets")
}

// Individual substats for each gear
model GearSubStats {
  id         Int     @id @default(autoincrement())
  gearId     Int
  statTypeId Int
  statValue  Decimal @db.Decimal(10, 2)
  rolls      Int // 0-5
  weight     Decimal @db.Decimal(5, 2)
  isModified Boolean @default(false) // Whether this substat was modified (reforged)

  // Relationships
  Gear     Gears     @relation(fields: [gearId], references: [id], onDelete: Cascade)
  StatType StatTypes @relation(fields: [statTypeId], references: [id])
  userId   String // User who owns this substat
  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("gear_substats")
}

model Gears {
  id Int @id @default(autoincrement())

  // Epic 7 Optimizer specific fields
  ingameId BigInt   @unique // Original game ID (can exceed 32-bit range)
  code     String // Gear code identifier
  type     GearType // WEAPON, ARMOR, HELM, NECK, RING, BOOTS
  rank     GearRank // COMMON, UNCOMMON, RARE, EPIC, HEROIC
  level    Int
  enhance  Int // Enhancement level (0-15)

  // Precomputed scores (optional)
  fScore Float? // Fribbels-like score
  score  Float? // Custom score

  // Main stat
  mainStatType      MainStatType // ATT, DEF, MAX_HP, ATT_RATE, DEF_RATE, MAX_HP_RATE, CRI, CRI_DMG, SPEED, ACC, RES
  mainStatValue     Float
  mainStatBaseValue Float

  // Additional properties
  statMultiplier Float
  tierMultiplier Float
  storage        Boolean @default(true)
  equipped       Boolean @default(false)

  // Equipment relationship - references hero ingameId
  equippedBy       BigInt? // Hero ingameId if equipped
  ingameEquippedId String?

  // Relationships
  Hero         Heroes?        @relation(fields: [equippedBy], references: [ingameId])
  GearSubStats GearSubStats[]
  userId       String // User who owns this gear
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([rank])
  @@index([enhance])
  @@index([equipped])
  @@index([userId])
  @@map("gears")
}

model Heroes {
  id Int @id @default(autoincrement())

  // Epic 7 specific fields
  ingameId BigInt       @unique // Original game ID (can exceed 32-bit range)
  name     String
  element  HeroElement? // FIRE, ICE, EARTH, LIGHT, DARK
  rarity   HeroRarity? // THREE_STAR, FOUR_STAR, FIVE_STAR, SIX_STAR
  class    HeroClass? // WARRIOR, KNIGHT, RANGER, MAGE, SOUL_WEAVER, THIEF

  // Stats (base stats from hero data)
  attack            Int?
  defense           Int?
  health            Int?
  speed             Int?
  criticalHitChance Int?
  criticalHitDamage Int?
  effectiveness     Int?
  effectResistance  Int?

  // Equipment slots (using gear ingameId references)
  weaponId   Int? // References gear ingameId
  armorId    Int? // References gear ingameId
  helmetId   Int? // References gear ingameId
  necklaceId Int? // References gear ingameId
  ringId     Int? // References gear ingameId
  bootId     Int? // References gear ingameId

  // Relationships
  Gears             Gears[] // All gears equipped by this hero
  userId            String // User who owns this hero
  User              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  GearPriorities    GearPriorities[]
  GearPriorityLinks GearPriorityHeroes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("heroes")
}

// User defined gear chasing / priority profiles
model GearPriorities {
  id     Int    @id @default(autoincrement())
  // Ownership
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Friendly name, often a hero name or generic label
  name String

  // Desired set and main stat
  gearType     GearType?
  gearSetId    Int?
  gearSet      GearSets?     @relation(fields: [gearSetId], references: [id])
  mainStatType MainStatType?

  // Priority substats (ordered). Nullable to allow fewer than four.
  prioritySub1Id Int?
  PrioritySub1   StatTypes? @relation("PrioritySub1", fields: [prioritySub1Id], references: [id])
  prioritySub2Id Int?
  PrioritySub2   StatTypes? @relation("PrioritySub2", fields: [prioritySub2Id], references: [id])
  prioritySub3Id Int?
  PrioritySub3   StatTypes? @relation("PrioritySub3", fields: [prioritySub3Id], references: [id])
  prioritySub4Id Int?
  PrioritySub4   StatTypes? @relation("PrioritySub4", fields: [prioritySub4Id], references: [id])

  // Optional hero association
  heroIngameId BigInt?
  TargetHero   Heroes? @relation(fields: [heroIngameId], references: [ingameId])
  heroName     String?

  // State
  isActive Boolean              @default(true)
  Heroes   GearPriorityHeroes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
  @@index([gearType])
  @@index([gearSetId])
  @@index([heroIngameId])
  @@map("gear_priorities")
}

// Join table: many heroes can be linked to one gear priority
model GearPriorityHeroes {
  id             Int    @id @default(autoincrement())
  gearPriorityId Int
  heroIngameId   BigInt

  GearPriority GearPriorities @relation(fields: [gearPriorityId], references: [id], onDelete: Cascade)
  Hero         Heroes         @relation(fields: [heroIngameId], references: [ingameId], onDelete: Cascade)

  @@unique([gearPriorityId, heroIngameId])
  @@index([heroIngameId])
  @@map("gear_priority_heroes")
}

// Global settings for scoring and thresholds (per user)
model Settings {
  id                    Int     @id @default(autoincrement())
  // fScore configuration
  fScoreIncludeMainStat Boolean @default(true)
  fScoreSubstatWeights  Json? // { "Speed": 2.0, "Crit %": 1.5, ... }
  fScoreMainStatWeights Json? // { "att": 0.0, "def": 0.0, "max_hp": 0.0, "att_rate": 0.5, ... }
  // Threshold configuration per substat for badge coloring
  substatThresholds     Json? // { "Speed": { "plus15": [4,8,12,18] }, "Crit %": { "plus15": [4,8,12,16] }, ... }
  // User ownership
  userId                String
  User                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId]) // One settings per user
  @@index([userId])
  @@map("settings")
}

// User authentication model
model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  User                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String  @id @default(cuid())
  name          String
  email         String  @unique
  emailVerified Boolean @default(false)
  image         String?

  Account        Account[]
  Session        Session[]
  Gears          Gears[]
  Heroes         Heroes[]
  Settings       Settings?
  GearSubStats   GearSubStats[]
  GearPriorities GearPriorities[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verifications")
}
