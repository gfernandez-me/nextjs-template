// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  seed     = "npx tsx prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Epic 7 Gear Types
enum GearType {
  weapon
  armor
  helm
  neck
  ring
  boot
}

// Epic 7 Gear Display Names
enum GearDisplayName {
  Weapon
  Armor
  Helmet
  Necklace
  Ring
  Boots
}

// Epic 7 Gear Ranks
enum GearRank {
  Common
  Uncommon
  Rare
  Epic
  Heroic
}

// Epic 7 Main Stat Types
enum MainStatType {
  att
  def
  max_hp
  att_rate
  def_rate
  max_hp_rate
  cri
  cri_dmg
  speed
  acc
  res
}

// Epic 7 Stat Categories
enum StatCategory {
  flat
  percentage
}

// Epic 7 Hero Elements
enum HeroElement {
  Fire
  Ice
  Earth
  Light
  Dark
}

// Epic 7 Hero Rarities
enum HeroRarity {
  THREE_STAR
  FOUR_STAR
  FIVE_STAR
  SIX_STAR
}

// Epic 7 Hero Classes
enum HeroClass {
  Warrior
  Knight
  Ranger
  Mage
  SoulWeaver
  Thief
}

// Reference table for valid stat types and their weights
model StatTypes {
  id           Int          @id @default(autoincrement())
  statName     String       @unique // Speed, Attack, Defense, etc.
  statCategory StatCategory // flat, percentage
  weight       Decimal      @db.Decimal(5, 2) // Weight for optimization calculations
  isMainStat   Boolean      @default(false)
  isSubstat    Boolean      @default(true)
  createdAt    DateTime     @default(now())

  // Relationships
  substats         GearSubStats[]
  // Back-relations to gear priorities ordered substats
  gearPrioritySub1 GearPriorities[] @relation("PrioritySub1")
  gearPrioritySub2 GearPriorities[] @relation("PrioritySub2")
  gearPrioritySub3 GearPriorities[] @relation("PrioritySub3")
  gearPrioritySub4 GearPriorities[] @relation("PrioritySub4")

  @@map("stat_types")
}

// Reference table for gear sets and their effects
model GearSets {
  id                Int      @id @default(autoincrement())
  setName           String   @unique // SpeedSet, AttackSet, etc.
  piecesRequired    Int // 2 or 4
  effectDescription String // +25% Speed, +35% Attack, etc.
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())

  // Back-relations
  gearPriorities GearPriorities[]

  @@map("gear_sets")
}

// Individual substats for each gear
model GearSubStats {
  id         Int      @id @default(autoincrement())
  gearId     Int
  statTypeId Int
  statValue  Decimal  @db.Decimal(10, 2)
  rolls      Int // 0-5
  weight     Decimal  @db.Decimal(5, 2)
  isModified Boolean  @default(false) // Whether this substat was modified (reforged)
  userId     String // User who owns this substat
  createdAt  DateTime @default(now())

  // Relationships
  gear     Gears     @relation(fields: [gearId], references: [id], onDelete: Cascade)
  statType StatTypes @relation(fields: [statTypeId], references: [id])
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("gear_substats")
}

model Gears {
  id Int @id @default(autoincrement())

  // Epic 7 Optimizer specific fields
  ingameId BigInt          @unique // Original game ID (can exceed 32-bit range)
  code     String // Gear code identifier
  type     GearType // weapon, armor, helm, neck, ring, boot
  gear     GearDisplayName // Display name: Weapon, Armor, Helmet, Necklace, Ring, Boots
  rank     GearRank // Common, Uncommon, Rare, Epic, Heroic
  level    Int
  enhance  Int // Enhancement level (0-15)

  // Precomputed scores (optional)
  fScore Float? // Fribbels-like score
  score  Float? // Custom score

  // Main stat
  mainStatType      MainStatType // att, def, max_hp, att_rate, def_rate, max_hp_rate, cri, cri_dmg, speed, acc, res
  mainStatValue     Float
  mainStatBaseValue Float

  // Additional properties
  statMultiplier Float
  tierMultiplier Float
  storage        Boolean @default(true)
  equipped       Boolean @default(false)

  // Equipment relationship - references hero ingameId
  equippedBy       BigInt? // Hero ingameId if equipped
  ingameEquippedId String?

  // User ownership
  userId String // User who owns this gear

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  hero     Heroes?        @relation(fields: [equippedBy], references: [ingameId])
  substats GearSubStats[]
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([rank])
  @@index([enhance])
  @@index([equipped])
  @@index([userId])
  @@map("gears")
}

model Heroes {
  id Int @id @default(autoincrement())

  // Epic 7 specific fields
  ingameId BigInt       @unique // Original game ID (can exceed 32-bit range)
  name     String
  element  HeroElement? // Fire, Ice, Earth, Light, Dark
  rarity   HeroRarity? // 3*, 4*, 5*
  class    HeroClass? // Warrior, Knight, Ranger, Mage, Soul Weaver, Thief

  // Stats (base stats from hero data)
  attack            Int?
  defense           Int?
  health            Int?
  speed             Int?
  criticalHitChance Int?
  criticalHitDamage Int?
  effectiveness     Int?
  effectResistance  Int?

  // Equipment slots (using gear ingameId references)
  weaponId   Int? // References gear ingameId
  armorId    Int? // References gear ingameId
  helmetId   Int? // References gear ingameId
  necklaceId Int? // References gear ingameId
  ringId     Int? // References gear ingameId
  bootId     Int? // References gear ingameId

  // User ownership
  userId String // User who owns this hero

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  gears             Gears[] // All gears equipped by this hero
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  gearPriorities    GearPriorities[]
  gearPriorityLinks GearPriorityHeroes[]

  @@index([userId])
  @@map("heroes")
}

// User defined gear chasing / priority profiles
model GearPriorities {
  id     Int    @id @default(autoincrement())
  // Ownership
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Friendly name, often a hero name or generic label
  name String

  // Desired set and main stat
  gearType     GearType?
  gearSetId    Int?
  gearSet      GearSets?     @relation(fields: [gearSetId], references: [id])
  mainStatType MainStatType?

  // Priority substats (ordered). Nullable to allow fewer than four.
  prioritySub1Id Int?
  prioritySub1   StatTypes? @relation("PrioritySub1", fields: [prioritySub1Id], references: [id])
  prioritySub2Id Int?
  prioritySub2   StatTypes? @relation("PrioritySub2", fields: [prioritySub2Id], references: [id])
  prioritySub3Id Int?
  prioritySub3   StatTypes? @relation("PrioritySub3", fields: [prioritySub3Id], references: [id])
  prioritySub4Id Int?
  prioritySub4   StatTypes? @relation("PrioritySub4", fields: [prioritySub4Id], references: [id])

  // Optional hero association
  heroIngameId BigInt?
  targetHero   Heroes? @relation(fields: [heroIngameId], references: [ingameId])
  heroName     String?

  // State
  isActive  Boolean              @default(true)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  heroes    GearPriorityHeroes[]

  @@unique([userId, name])
  @@index([userId])
  @@index([gearType])
  @@index([gearSetId])
  @@index([heroIngameId])
  @@map("gear_priorities")
}

// Join table: many heroes can be linked to one gear priority
model GearPriorityHeroes {
  id             Int    @id @default(autoincrement())
  gearPriorityId Int
  heroIngameId   BigInt

  gearPriority GearPriorities @relation(fields: [gearPriorityId], references: [id], onDelete: Cascade)
  hero         Heroes         @relation(fields: [heroIngameId], references: [ingameId], onDelete: Cascade)

  @@unique([gearPriorityId, heroIngameId])
  @@index([heroIngameId])
  @@map("gear_priority_heroes")
}

// Global settings for scoring and thresholds (per user)
model Settings {
  id                    Int      @id @default(autoincrement())
  // fScore configuration
  fScoreIncludeMainStat Boolean  @default(true)
  fScoreSubstatWeights  Json? // { "Speed": 2.0, "Crit %": 1.5, ... }
  fScoreMainStatWeights Json? // { "att": 0.0, "def": 0.0, "max_hp": 0.0, "att_rate": 0.5, ... }
  // Threshold configuration per substat for badge coloring
  substatThresholds     Json? // { "Speed": { "plus15": [4,8,12,18] }, "Crit %": { "plus15": [4,8,12,16] }, ... }
  // User ownership
  userId                String
  // metadata
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId]) // One settings per user
  @@index([userId])
  @@map("settings")
}

// User authentication model
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  gears          Gears[]
  heroes         Heroes[]
  settings       Settings?
  substats       GearSubStats[]
  gearPriorities GearPriorities[]

  @@map("users")
}
